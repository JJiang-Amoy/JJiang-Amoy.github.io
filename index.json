[{"categories":null,"contents":"Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go     Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34;   Shortcut:\nmsg := \u0026#34;Hello\u0026#34;     Constants const Phi = 1.618     ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/notes/go/basic/introduction/","summary":"Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go     Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34;   Shortcut:\nmsg := \u0026#34;Hello\u0026#34;     Constants const Phi = 1.","tags":null,"title":"Introduction"},{"categories":null,"contents":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string`     Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float     Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0}     Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\n    Type Conversion i := 2 f := float64(i) u := uint(i)     Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;)     ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string`     Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float     Arrays // var numbers [5]int numbers := [.","tags":null,"title":"Basic Types"},{"categories":null,"contents":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;)     Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default!  fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() }     Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() }     ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;)     Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default!  fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() }     Loop for count := 0; count \u0026lt;= 10; count++ { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;)     ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/notes/go/advanced/files/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;)     ","tags":null,"title":"File Manipulation"},{"categories":null,"contents":"2022-5-30 Meeting schedule is shown below\n10:10-10:20 With daasdasdsda\n    ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/notes/schedule/2010/","summary":"2022-5-30 Meeting schedule is shown below\n10:10-10:20 With daasdasdsda\n    ","tags":null,"title":"Schedule 2010"},{"categories":null,"contents":"2022-5-30 Meeting schedule is shown below\n10:10-10:20 With dasd\n    ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/notes/schedule/template/","summary":"2022-5-30 Meeting schedule is shown below\n10:10-10:20 With dasd\n    ","tags":null,"title":"Schedule Template"},{"categories":null,"contents":"Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME}    Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi     ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/notes/bash/basic/","summary":"Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME}    Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi     ","tags":null,"title":"Bash Variables"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"sadas"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"This theme comes with built in mermaid support powered by maemaidj-js. To enable mermaid for a page, you have to put mermaid: true in your page front-matter. For example, this page has the following front-matter:\ntitle: \u0026#34;Mermaid Support\u0026#34; date: 2022-03-14T06:15:35+06:00 menu: sidebar: name: Mermaid identifier: writing-post-mermaid parent: writing-post weight: 60 mermaid: true Then, you can use mermaid short code to add your mermaid content. For example:\n{{\u0026lt; mermaid align=\u0026#34;center\u0026#34;\u0026gt;}} # your mermaid content here {{\u0026lt; /mermaid \u0026gt;}} The mermaid short code accept the following parameters:\n align: Let\u0026rsquo;s you align your diagram at left, right, or center. The default alignment is center. background: Let\u0026rsquo;s you change the background color of your diagram.  Examples Here, are few example of different diagram using mermaid.\nGraph {{\u0026lt; mermaid align=\u0026#34;left\u0026#34; \u0026gt;}} graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] {{\u0026lt; /mermaid \u0026gt;}}  graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]   Sequence Diagram {{\u0026lt; mermaid \u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! {{\u0026lt; /mermaid \u0026gt;}}  sequenceDiagram participant Alice participant Bob Alice-John: Hello John, how are you? loop Healthcheck John-John: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--Alice: Great! John-Bob: How about you? Bob--John: Jolly good!   Gantt diagram {{\u0026lt; mermaid \u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d {{\u0026lt; /mermaid \u0026gt;}}  gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d   Class Diagram {{\u0026lt; mermaid \u0026gt;}} classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u0026lt;--\u0026gt; C2: Cool label {{\u0026lt; /mermaid \u0026gt;}}  classDiagram Class01 C2 : Where am i? Class09 --* C3 Class09 --| Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08  C2: Cool label   Git Graph {{\u0026lt; mermaid background=\u0026#34;black\u0026#34; align=\u0026#34;right\u0026#34; \u0026gt;}} gitGraph: options { \u0026#34;nodeSpacing\u0026#34;: 150, \u0026#34;nodeRadius\u0026#34;: 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u0026lt; /mermaid \u0026gt;}}  gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch   ER Diagram {{\u0026lt; mermaid \u0026gt;}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses {{\u0026lt; /mermaid \u0026gt;}}  erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses  ","date":"March 14, 2022","hero":"/posts/writing-posts/mermaid/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/writing-posts/mermaid/","summary":"This theme comes with built in mermaid support powered by maemaidj-js. To enable mermaid for a page, you have to put mermaid: true in your page front-matter. For example, this page has the following front-matter:\ntitle: \u0026#34;Mermaid Support\u0026#34; date: 2022-03-14T06:15:35+06:00 menu: sidebar: name: Mermaid identifier: writing-post-mermaid parent: writing-post weight: 60 mermaid: true Then, you can use mermaid short code to add your mermaid content. For example:\n{{\u0026lt; mermaid align=\u0026#34;center\u0026#34;\u0026gt;}} # your mermaid content here {{\u0026lt; /mermaid \u0026gt;}} The mermaid short code accept the following parameters:","tags":null,"title":"Mermaid Support"},{"categories":null,"contents":"Comments This theme has built-in support for comment on the posts. Currently, it support the following comment plugins:\n Disqus Valine Utterances Giscus  Disqus Disqus is a popular comment plug-in. After signing up to Disqus you will need to provide your shortname under params.features.comment section of your config.yaml file as below:\nparams: features: comment: enable: true disqus: shortName: \u0026lt;your-disqus-shortname\u0026gt; Valine Valine appears to be a Chinese comments comments plugin. You can enable valine comment plugin by adding valine section under params.features.comments section as below:\nparams: features: comment: enable: true valine: appId: app-id appKey: app-key avatar: avatar placeholder: placeholder lang: lang recordIP: recordIP enableQQ: enableQQ Utterances Utterances uses GitHub Issues to store the comments for your posts. This requires you to allow have a public repository, and the Utterances app to use your repository. Setup instructions can be found at the Utterances home page.\nparams: features: comment: enable: true utteranc: repo: your-repo/name issueTerm: url theme: light Giscus Giscus is based off Utterances, but uses GitHub Discussions as the backend. This requires you to allow have a public repository, and the Giscus app to use your repository. Setup instructions can be found at the Giscus home page.\nTo enable Giscus comment plugin, at first go to giscus.app. On the Configuration section, provide the necessary information. It will give you a script to include to your site. You just need to extract the respective information from the script and provide it under params.features.comment.giscus section as below:\nparams: features: comment: enable: true giscus: repo: your-repo/name repoID: your-repo-id category: your-category categoryID: your-category-id # theme: light # map: url # reaction: 1 # metadata: 0 # inputPosition: bottom # crossOrigin: anonymous The commented out options are optional. You can use them to further customize your comment experience.\n","date":"March 14, 2022","hero":"/posts/comments/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/comments/","summary":"Comments This theme has built-in support for comment on the posts. Currently, it support the following comment plugins:\n Disqus Valine Utterances Giscus  Disqus Disqus is a popular comment plug-in. After signing up to Disqus you will need to provide your shortname under params.features.comment section of your config.yaml file as below:\nparams: features: comment: enable: true disqus: shortName: \u0026lt;your-disqus-shortname\u0026gt; Valine Valine appears to be a Chinese comments comments plugin. You can enable valine comment plugin by adding valine section under params.","tags":null,"title":"Comments"},{"categories":null,"contents":"This theme supports adding various support/donation links in your site. Currently, supported support links are:\n Ko-fi  Ko-fi You can add your Ko-fi floating button in your website. To add the floating button, add the support section under params.features section of your sites config.yaml file:\nparams: features: support: enabled: true kofi: user: \u0026lt;your ko-fi user id\u0026gt; text: Tip Me textColor: \u0026#39;#f9fafc\u0026#39; backgroundColor: \u0026#39;#248aaa\u0026#39; ","date":"March 14, 2022","hero":"/posts/supports/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/supports/","summary":"This theme supports adding various support/donation links in your site. Currently, supported support links are:\n Ko-fi  Ko-fi You can add your Ko-fi floating button in your website. To add the floating button, add the support section under params.features section of your sites config.yaml file:\nparams: features: support: enabled: true kofi: user: \u0026lt;your ko-fi user id\u0026gt; text: Tip Me textColor: \u0026#39;#f9fafc\u0026#39; backgroundColor: \u0026#39;#248aaa\u0026#39; ","tags":null,"title":"Supports Links"},{"categories":null,"contents":"We\u0026rsquo;ve all been there We all want to be able to customize the layout of a given theme, and in this short tutorial I will show you how. I stumbled my way through this, and I hope you won\u0026rsquo;t have to as well.\nStep 1 / CSS Finding what you are wanting to customize. The first thing I wanted to do was customize the css styles. I stumbled through a few git issues, and posts and found that truly the author made it easy, I just didn\u0026rsquo;t think it through (as I was new to Hugo as well).\nAll you will need to do is create the following structure in your root directory: /static/css/style.css Congrats! You\u0026rsquo;re done! The rest is just styling things how you like.\nThe following steps will prevent you from seeing updates on any files that you overwrite.  Step 2 / Layout Changes After accomplishing the layout changes I wanted to look at what it would take to add SCSS into the theme. However, as stated, being new to Hugo set me back just a bit. Unfortunately, I was unable to find a better method, however you can overwrite the layout files by simply place the file you want in the same structure that is in the theme\u0026rsquo;s layout directory.\nStep 3 / Adding SCSS As stated I wanted to change the layout so that I could use SCSS. Well, we\u0026rsquo;re to that point. Now that we know how to update the layout files you will need to update them to grab SCSS files instead. I personally used the following code and it seems to work well.\n\u0026lt;!--================= custom style overrides =========================--\u0026gt; {{ $options := (dict \u0026#34;targetPath\u0026#34; \u0026#34;style.css\u0026#34; \u0026#34;outputStyle\u0026#34; \u0026#34;compressed\u0026#34; \u0026#34;enableSourceMap\u0026#34; true \u0026#34;includePaths\u0026#34; (slice \u0026#34;\u0026#34;)) }} {{ $sass := resources.Get \u0026#34;/sass/style.scss\u0026#34; }} {{ $style := $sass | resources.ToCSS $options }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34;/\u0026gt; You can leave our the \u0026quot;includePaths\u0026quot; (slice \u0026quot;\u0026quot;) portion if you are not wanting to combine external files with it. SCSS will still be able to import files as expected.\nAfter adding the changes to the layouts, you will want to add your sass files into /assests/sass/style.scss\nRecommended files These are the files I recommend to update to add SCSS.\n _default  baseof.html   index.html  ","date":"August 7, 2021","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/customizing/customize-layout/","summary":"We\u0026rsquo;ve all been there We all want to be able to customize the layout of a given theme, and in this short tutorial I will show you how. I stumbled my way through this, and I hope you won\u0026rsquo;t have to as well.\nStep 1 / CSS Finding what you are wanting to customize. The first thing I wanted to do was customize the css styles. I stumbled through a few git issues, and posts and found that truly the author made it easy, I just didn\u0026rsquo;t think it through (as I was new to Hugo as well).","tags":null,"title":"Customizing the layout"},{"categories":null,"contents":"Greeting! Thank you for deciding to use this theme. In this post, we are going to create a hugo site from scratch. Then, we will configure it with Toha theme, make it multilingual, add some example posts. At the end of this post, you should be able to run a fully functional hugo site with Toha theme locally.\nIf you want a head start, you can just fork hugo-toha/hugo-toha.github.io repo, rename it and update with your own data. This repo has already been configured to deploy in Github Pages and Netlify.\nIf you already have a hugo site, skip to the Add Theme section.\nCreate Repository At first, create a repository in Github. If you want to deploy this site in Github Pages, your repo named should be \u0026lt;your user name\u0026gt;.github.io. Clone the repository into your local machine and navigate into it.\nCreate Site Now, make sure that you have Hugo installed. This theme should work with hugo version v0.68.0 and later. Now, run the following command in the root of your repository to initiate a hugo website.\n$ hugo new site ./ -f=yaml --force This command will create a basic hugo site structure. Here, -f=yaml flag tells hugo to create configuration file in YAML format and --force flag forces hugo to create a site even if the target directory is not empty.\nInitialize the git repository Now,it is time to add a git to your website. Initialize the git repository using the following command:\n$ git init Add Theme Now, it is time to add a theme into your site. Add Toha theme as git sub-module of your repository using the following command:\n$ git submodule add https://github.com/hugo-toha/toha.git themes/toha   Don\u0026rsquo;t use SSH URL of the theme during adding it as git sub-module. Also, don\u0026rsquo;t clone the theme in your themes directory using git clone. Otherwise, we won\u0026rsquo;t be able to automate the site publishing using Github Action or Netlify.\n Run Site Locally Now, you can already run your site locally. Let\u0026rsquo;s run the site in watch mode using the following command:\n$ hugo server -t toha -w If you navigate to http://localhost:1313, you should see a basic site with Toha theme. In the next section, we are going to configure the site to look like the hugo-toha.github.io. As we have run the server in watch mode, any changes we make to the site will be instantly visible in the browser.\nConfigure Site Now, we are ready to configure our site. In this section, we are going to add author information, different sections, and sample posts etc.\nUpdate config.yaml When you have created the site using hugo new site command, it has created a config.yaml file in the root of your repository. Replace the default content of the config.yaml file with the following:\nbaseURL: https://hugo-toha.github.io languageCode: en-us title: \u0026#34;John\u0026#39;s Blog\u0026#34; theme: \u0026#34;toha\u0026#34; # Manage languages # For any more details, you can check the official documentation: https://gohugo.io/content-management/multilingual/ languages: en: languageName: English weight: 1 # Control TOC depth markup: tableOfContents: startLevel: 2 endLevel: 6 ordered: false # Enable global emoji support enableEmoji: true # Site parameters params: # GitHub repo URL of your site gitRepo: https://github.com/hugo-toha/hugo-toha.github.io # specify whether you want to write some blog posts or not enableBlogPost: true # specify whether you want to show Table of Contents in reading page enableTOC: true # Provide newsletter configuration. This feature hasn\u0026#39;t been implemented yet. # Currently, you can just hide it from the footer. newsletter: enable: true Here, you are seeing a basic configuration for Toha theme. You can see the configuration file used in the example site form here. For more detailed configuration options, please check this post.\nAdd Data Most of the contents of this theme is driven by some YAML files in data directory. In this section, we are going to add some sample data. Since, we\u0026rsquo;re building a multilingual site, we are going to keep the data for each language separate into their own locale folder.\nAt first, create en folder inside your data directory. We are going to add data for English language here.\nSite Information Now, create a site.yaml file inside /data/en/ directory of your repository. Add the following content there:\n# Copyright Notice copyright: © 2020 Copyright. # Meta description for your site. This will help the search engines to find your site. description: Portfolio and personal blog of John Doe. To see all the available options for site information, check this sample file.\nAuthor Information Now, create a author.yaml file in /data/en/ directory and add your information there as below:\n# some information about you name: \u0026#34;John Doe\u0026#34; nickname: \u0026#34;John\u0026#34; # greeting message before your name. it will default to \u0026#34;Hi! I am\u0026#34; if not provided greeting: \u0026#34;Hi, I am\u0026#34; image: \u0026#34;images/author/john.png\u0026#34; # give your some contact information. they will be used in the footer contactInfo: email: \u0026#34;johndoe@example.com\u0026#34; phone: \u0026#34;+0123456789\u0026#34; # some summary about what you do summary: - I am a Developer - I am a Devops - I love servers - I work on open-source projects - I love to work with some fun projects Add Sections Now, we are going to add different sections into our home page. At first, create a sections folder inside your /data/en directory. Here, we are going to add few sections with minimum configurations. In order to see detailed configuration options for the sections, please visit here.\nAbout Section Create about.yaml file inside your /data/en/sections/ directory. Then add the following contents there:\n# section information section: name: About id: about enable: true weight: 1 showOnNavbar: true template: sections/about.html # your designation designation: Software Engineer # your company information company: name: Example Co. url: \u0026#34;https://www.example.com\u0026#34; # your resume. this file path should be relative to you \u0026#34;static\u0026#34; directory resume: \u0026#34;files/resume.pdf\u0026#34; # a summary about you summary: \u0026#39;I am a passionate software engineer with x years of working experience. I built OSS tools for [Kubernetes](https://kubernetes.io/) using GO. My tools help people to deploy their workloads in Kubernetes. Sometimes, I work on some fun projects such as writing a theme, etc.\u0026#39; # your social links # give as many as you want. use font-awesome for the icons. socialLinks: - name: Github icon: \u0026#34;fab fa-github\u0026#34; url: \u0026#34;https://www.github.com/example\u0026#34; # your soft skills # give the percentage between 50 to 100 with 5 intervals. # currently supported colors: blue, yellow, pink, green, sky, orange softSkills: - name: Leadership percentage: 85 color: blue - name: Team Work percentage: 90 color: yellow Put the resume.pdf file in /static/files directory of your repository. You can find the about.yaml file used in the example site from here.\nSkills Section Create skills.yaml file inside your /data/en/sections/ directory. Then add the following contents there:\n# section information section: name: Skills id: skills enable: true weight: 2 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true # Your Skills. # Give a summary of you each skill in the summary section. skills: - name: Kubernetes logo: \u0026#34;/images/sections/skills/kubernetes.png\u0026#34; summary: \u0026#34;Capable of deploying, managing application on Kubernetes. Experienced in writing Kubernetes controllers for CRDs.\u0026#34; url: \u0026#34;https://kubernetes.io/\u0026#34; - name: Go Development logo: \u0026#34;/images/sections/skills/go.png\u0026#34; summary: \u0026#34;Using as the main language for professional development. Capable of writing scalable, testable, and maintainable program.\u0026#34; url: \u0026#34;https://golang.org/\u0026#34; - name: Cloud Computing logo: \u0026#34;/images/sections/skills/cloud.png\u0026#34; summary: \u0026#34;Worked with most of the major clouds such as GCP, AWS, Azure etc.\u0026#34; Put the skills images into images/sections/skills/ directory of your repository. You will find the images here. Also, you can find the skills.yaml file used in the example site from here.\nExperiences Section Create experiences.yaml file inside your /data/en/sections/ directory. Then add the following contents there:\n# section information section: name: Experiences id: experiences enable: true weight: 3 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true  # Your experiences experiences: - company: name: Example Co. url: \u0026#34;https://www.example.com\u0026#34; location: Dhaka Branch # company overview overview: Example Co. is a widely recognized company for cloud-native development. It builds tools for Kubernetes. positions: - designation: Senior Software Engineer start: Nov 2019 # don\u0026#39;t provide end date if you are currently working there. It will be replaced by \u0026#34;Present\u0026#34; # end: Dec 2020 # give some points about what was your responsibilities at the company. responsibilities: - Design and develop XYZ tool for ABC task - Design, develop and manage disaster recovery tool [Xtool](https://www.example.com) that backup Kubernetes volumes, databases, and cluster\u0026#39;s resource definition. - Lead backend team. - company: name: PreExample Co. url: \u0026#34;https://www.preexample.com\u0026#34; location: Nowhere overview: PreExample Co. is a gateway company to enter into Example co. So, nothing special here. positions: - designation: Software Engineer start: March 2016 end: May 2017 responsibilities: - Write lots of example codes. - Read lots of examples. - See lots of example videos. You can find the experiences.yaml file used in the example site from here.\nProject Section Create projects.yaml file inside your /data/en/sections/ directory. Then add the following contents there:\n# section information section: name: Projects id: projects enable: true weight: 4 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true # filter buttons buttons: - name: All filter: \u0026#34;all\u0026#34; - name: Professional filter: \u0026#34;professional\u0026#34; - name: Academic filter: \u0026#34;academic\u0026#34; - name: Hobby filter: \u0026#34;hobby\u0026#34; # your projects projects: - name: Kubernetes logo: /images/sections/projects/kubernetes.png role: Contributor timeline: \u0026#34;March 2018 - Present\u0026#34; repo: https://github.com/kubernetes/kubernetes # If your project is a public repo on GitHub, then provide this link. it will show star count. #url: \u0026#34;\u0026#34; # If your project is not a public repo but it has a website or any external details url then provide it here. don\u0026#39;t provide \u0026#34;repo\u0026#34; and \u0026#34;url\u0026#34; simultaneously. summary: Production-Grade Container Scheduling and Management. tags: [\u0026#34;professional\u0026#34;, \u0026#34;kubernetes\u0026#34;, \u0026#34;cloud\u0026#34;] - name: Tensorflow logo: /images/sections/projects/tensorflow.png role: Developer timeline: \u0026#34;Jun 2018 - Present\u0026#34; repo: https://github.com/tensorflow/tensorflow #url: \u0026#34;\u0026#34; summary: An Open Source Machine Learning Framework for Everyone. tags: [\u0026#34;professional\u0026#34;, \u0026#34;machine-learning\u0026#34;,\u0026#34;academic\u0026#34;] - name: Toha logo: /images/sections/projects/toha.png role: Owner timeline: \u0026#34;Jun 2019 - Present\u0026#34; repo: https://github.com/hossainemruz/toha summary: A Hugo theme for personal portfolio. tags: [\u0026#34;hobby\u0026#34;,\u0026#34;hugo\u0026#34;,\u0026#34;theme\u0026#34;,\u0026#34;professional\u0026#34;] Put the projects images into images/sections/projects/ directory of your repository. You will find the images here. Also, you can find the projects.yaml file used in the example site from here.\nRecent Posts Section Create recent-posts.yaml file inside your /data/en/sections/ directory. Then add the following contents there:\n# section information section: name: Recent Posts id: recent-posts enable: true weight: 5 showOnNavbar: true You can find the recent-posts.yaml file used in the example site from here.\n This section will be empty until you add any post in your site.\n Achievements Section Create achievements.yaml file inside your /data/en/sections/ directory. Then add the following contents there:\n# section information section: name: Achievements id: achievements enable: true weight: 6 showOnNavbar: true # Can optionally hide the title in sections # hideTitle: true # Your achievements achievements achievements: - title: Best Presenter image: /images/sections/achievements/presenter.jpg summary: Best presenter in the 2020 XYZ conference. - title: Champion image: /images/sections/achievements/sport.jpg summary: Champion in cycling inter-city cycling championship 2020. - title: Graduation image: /images/sections/achievements/graduation-cap.jpg summary: Received Bachelor of Science (B.Sc.) in Computer Science and Engineer from XYZ University. - title: Award Winner image: /images/sections/achievements/woman-winner.jpg summary: Wined best paper award at IEE Conference 2020. Put the projects images into images/sections/achievements/ directory of your repository. You will find the images here. Also, you can find the achievements.yaml file used in the example site from here.\nAdd Posts Now, we are ready add our first post into our site. Here, we are going to add this introduction post.\n At first, create a posts folder inside content directory of your site. Then, create _index.md file inside the posts directory. Copy the content of this file file and paste into the newly created _index.md file. Create introduction folder inside your posts directory. Add the following hero.svg inside your introduction folder. Now, create index.md file inside the introduction folder. This index.md file will hold the post contents. Add the following sample contents in the newly created index.md file.  Now, your post should appear at http://localhost:1313/posts and your Recent Posts section also should show this post card. For translating a post, just create a new file with name index.\u0026lt;language code\u0026gt;.md in the same directory. Then, add the translated content there.\nFor more sample posts, please visit here.\nWhat Next At this point, your site should look similar to the example site. Now, it\u0026rsquo;s time to deploy your site. You can follow the following deployments guides:\n Deploy in Github Pages Deploy in Netlify  ","date":"June 8, 2020","hero":"/posts/getting-started/prepare-site/hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/getting-started/prepare-site/","summary":"Greeting! Thank you for deciding to use this theme. In this post, we are going to create a hugo site from scratch. Then, we will configure it with Toha theme, make it multilingual, add some example posts. At the end of this post, you should be able to run a fully functional hugo site with Toha theme locally.\nIf you want a head start, you can just fork hugo-toha/hugo-toha.github.io repo, rename it and update with your own data.","tags":null,"title":"Prepare Your Site"},{"categories":null,"contents":"In this post, we are going to deploy the site we have created in previous post in Github Pages. At first, make sure that your repository name is \u0026lt;your username\u0026gt;.github.io. Then, commit any local uncommitted changes and push into Github.\nSetup Default Branch GitHub don\u0026rsquo;t serve a site from hugo templates directly. Instead, we have to provide the generated (HTML, CSS, JS etc.) files after building the site. From now, we are going to maintain two branches for our site. The main (previously known as master) branch will hold the generated contents after building the site. Github will serve the site from this branch. We will create another branch named source. This will hold our markdowns files and hugo templates.\nLet\u0026rsquo;s create the source branch main branch and push it into Github.\n# create the source branch $ git checkout -b source # push the source branch into Github $ git push origin source Now, we are going to set the source branch as our default branch. Go to Settings \u0026gt; Branches of your repository and replace main with source under Default branch section. Then, save the change by clicking Update button. A screenshot of the process is shown below:\n Going forward, all our developments will happen against this source branch.\nSet Github Pages Branch Now, we have to tell Github which branch we are using for holding generated contents. Go to the Settings of your repository. Scroll down until you find Github Pages section. Select main branch and /(root) directory under Source section.\nEnable Github Action We are going to automate the deploying process using Github Actions. At first, make sure that Github Action is enabled in your repository. Go to Settings \u0026gt; Actions of your repository and make sure Action permissions is set to Allow all actions. Here, is a screenshot of the respective setting:\nAdd Workflow We are going to use peaceiris/actions-hugo action to set up hugo and peaceiris/actions-gh-pages to deploy the site. Create .github folder at the root of your repository. Then, create workflows folder inside the .github folder. Finally, create a deploy-site.yaml file inside the workflows folder and add the following content there:\nname: Deploy to Github Pages # run when a commit is pushed to \u0026#34;source\u0026#34; branch on: push: branches: - source jobs: deploy: runs-on: ubuntu-18.04 steps: # checkout to the commit that has been pushed - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod # install Hugo - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.77.0\u0026#39; extended: true # build website - name: Build run: hugo --minify # push the generated content into the `main` (former `master`) branch. - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: main # if your main branch is `master` use that here. publish_dir: ./public This action will start on every push into the source branch. It will build the site and commit the generated content into main branch.\nDeploy If you have followed the guide properly, your site should be ready to deploy in Github Pages. Now, if you push any commit into your source branch, a Github Action will start and deploy your site automatically.\nPush a commit into the source branch and go to Actions tab of your repository to verify that the action has started.\n Now, wait for the actions to complete. If it completes successfully, you should see a green tick indicating successful run.\n Once the Github Action has completed successfully, you can browse your site at https://\u0026lt;your username\u0026gt;.github.io.\n","date":"June 8, 2020","hero":"/posts/getting-started/github-pages/hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/getting-started/github-pages/","summary":"In this post, we are going to deploy the site we have created in previous post in Github Pages. At first, make sure that your repository name is \u0026lt;your username\u0026gt;.github.io. Then, commit any local uncommitted changes and push into Github.\nSetup Default Branch GitHub don\u0026rsquo;t serve a site from hugo templates directly. Instead, we have to provide the generated (HTML, CSS, JS etc.) files after building the site. From now, we are going to maintain two branches for our site.","tags":null,"title":"Deploy site in Github Pages"},{"categories":null,"contents":"Netlify offers an excellent and easy process for deploying hugo static site. You can deploy your site in matter of few clicks. Unlike Github Pages, you can name your repository whatever you want. You can also customize the site URL.\nIn this post, we will show the step-by-step process of deploying a hugo site with netlify.\nAdd Netlify Configuration At first, create a netlify.toml file at the root of your repository and add the following configuration there:\n[build] command = \u0026#34;hugo --gc --minify\u0026#34; publish = \u0026#34;public\u0026#34; [context.production.environment] HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; HUGO_THEME = \u0026#34;toha\u0026#34; HUGO_VERSION = \u0026#34;0.77.0\u0026#34; [context.split1] command = \u0026#34;hugo --gc --minify --enableGitInfo\u0026#34; [context.split1.environment] HUGO_ENV = \u0026#34;production\u0026#34; HUGO_VERSION = \u0026#34;0.77.0\u0026#34; [context.deploy-preview] command = \u0026#34;hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.77.0\u0026#34; [context.branch-deploy] command = \u0026#34;hugo --gc --minify -b $DEPLOY_PRIME_URL\u0026#34; [context.branch-deploy.environment] HUGO_VERSION = \u0026#34;0.77.0\u0026#34; [context.next.environment] HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; Commit and push the netlify.toml file into Github. Now, you are ready to deploy your site with netlify.\nDeploy Site Now, login into netlify. Then, go to Sites tab of your netlify dashboard and click New site form Git button.\n A new popup will open. Select Github and authenticate, with your Github account.\n After authenticating, it will ask to select your desired repository. Select the repository you are using for your site.\n Now, netlify will take you to the deployment page. Select the branch you want to deploy. Netlify should automatically populate the required fields from the netlify.toml file you created earlier in this post. When you are satisfied with the configurations, press the Deploy button.\n Now, netlify will start publishing your site immediately. Wait for the publishing process to complete. Once, the site has been published, you can browse your site at the URL automatically generated by netlify. The auto-generated URL has been pointed out by a red rectangle in the screenshot below.\nCustomize URL You can easily customize the URL of your site with just few clicks as shown below.\n Click the Domain Setting button under Site Overview tab.  Now, you can either add your own domain by clicking on Add custom domain button or you can just use \u0026lt;your custom prefix\u0026gt;.netlify.app domain. Here, we are going with the later. Click the options dropdown and select Edit site name.   Then, give your site whatever name you want.   Once you have saved the new name, you will see the URL of your site has been updated instantly. Now, you can browse your site at the new URL.  ","date":"June 8, 2020","hero":"/posts/getting-started/netlify/hero.png","permalink":"https://jjiang-amoy.github.io/posts/getting-started/netlify/","summary":"Netlify offers an excellent and easy process for deploying hugo static site. You can deploy your site in matter of few clicks. Unlike Github Pages, you can name your repository whatever you want. You can also customize the site URL.\nIn this post, we will show the step-by-step process of deploying a hugo site with netlify.\nAdd Netlify Configuration At first, create a netlify.toml file at the root of your repository and add the following configuration there:","tags":null,"title":"Deploy site in Netlify"},{"categories":null,"contents":"You might want to keep your site up-to-date with the latest version of theme to enjoy the latest features and fixes. In this post, we are going to setup a Dependabot Github app to automatically update the theme version. The app will check daily if there is any update in the submodules. If it finds any update in the theme, it will create a PR updating your site to the latest theme version.\nSetup Dependabot Enable Dependabot in your repository by clicking Enable Dependabot button under Insights \u0026gt; Dependency Graph \u0026gt; Dependabot settings of your repository. For more information please check GitHub Documentation. A screenshot has been given below that is showing the process:\n Now, create a dependabot.yml file in the .github folder of your repository with the following content:\n# Update dependencies version: 2 updates: # Update the git submodules - package-ecosystem: \u0026#34;gitsubmodule\u0026#34; directory: \u0026#34;/\u0026#34; schedule: interval: \u0026#34;daily\u0026#34; labels: - \u0026#34;dependencies\u0026#34; - \u0026#34;automerge\u0026#34; You are all set. Now, dependabot will check for sub-module update daily. It will create a PR to your site if it finds any update in the theme.\nTo know more about the configuration options of Dependabot, please visit here.\n","date":"June 8, 2020","hero":"/posts/getting-started/theme-update/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/getting-started/theme-update/","summary":"You might want to keep your site up-to-date with the latest version of theme to enjoy the latest features and fixes. In this post, we are going to setup a Dependabot Github app to automatically update the theme version. The app will check daily if there is any update in the submodules. If it finds any update in the theme, it will create a PR updating your site to the latest theme version.","tags":null,"title":"Automate Theme Update"},{"categories":null,"contents":"This theme has been designed from a personal point of preference. As a developer, I want to organize my portfolio in a way that will reflect my skills best. So, this theme may or may not meet your needs but I will be happy to have your feedback.\nThis post will give you an overview of the features that this theme incorporates.\nMinimalist Design This theme has been designed to be minimalist and beautiful. The color scheme has been chosen to be simple but yet powerful. The post page has been designed to be as distraction-free as possible. Thanks to Anup Deb for his design guidance.\n Responsive The theme is fully responsive. It looks beautiful and consistent across Desktop, Laptop, Tablet, and Mobile devices.\n Carefully Designed Cards The skill and project cards are designed carefully to give more meaningful information. The skill cards not only just list your skills. It also gives the viewer an idea about your depth of knowledge of the particular skill. The project cards give an idea about the popularity of your project if it is an open-source project on Github.\n An Experience Timeline that truly represents your experiences The experience timeline has been designed to reflect your career background. It shows the responsibilities you have handled in various stages of your career.\n A Gallery to show your Achievements The gallery section allows you to show your achievements to the public.\n A sidebar that makes sense Did you ever find yourself spending lots of time to find a particular post on a blog? I did it too. This theme incorporates a sidebar menu that categorizes your posts in various categories and sub-categories.\n Customizability \u0026amp; Extensibility It is easy to customize the theme without changing the theme codes. It has been designed to be extensible and customizable. You can easily add a new section or overwrite the CSS of any existing sections without altering the theme.\nStill not meeting your requirements? File a feature request here.\nMultiple Language Support This theme has built-in support for multiple language. You can translate your content in multiple languages easily for better reachability.\n","date":"June 8, 2020","hero":"/posts/features/hero.png","permalink":"https://jjiang-amoy.github.io/posts/features/","summary":"This theme has been designed from a personal point of preference. As a developer, I want to organize my portfolio in a way that will reflect my skills best. So, this theme may or may not meet your needs but I will be happy to have your feedback.\nThis post will give you an overview of the features that this theme incorporates.\nMinimalist Design This theme has been designed to be minimalist and beautiful.","tags":null,"title":"Features"},{"categories":["Basic"],"contents":"Greeting! This is an introduction post. This post tests the followings:\n Hero image is in the same directory as the post. This post should be at top of the sidebar. Post author should be the same as specified in author.yaml file.  ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/contact/asd/","summary":"Greeting! This is an introduction post. This post tests the followings:\n Hero image is in the same directory as the post. This post should be at top of the sidebar. Post author should be the same as specified in author.yaml file.  ","tags":["Basic","Multi-lingual"],"title":"Introduction"},{"categories":["Basic"],"contents":"Greeting! This is an introduction post. This post tests the followings:\n Hero image is in the same directory as the post. This post should be at top of the sidebar. Post author should be the same as specified in author.yaml file.  ","date":"June 8, 2020","hero":"/posts/introduction/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/introduction/","summary":"Greeting! This is an introduction post. This post tests the followings:\n Hero image is in the same directory as the post. This post should be at top of the sidebar. Post author should be the same as specified in author.yaml file.  ","tags":["Basic","Multi-lingual"],"title":"Introduction"},{"categories":null,"contents":"This is a sample post intended to test the followings:\n A different post author. Table of contents. Markdown content rendering. Math rendering. Emoji rendering.   Markdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n Math Rendering Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n Emoji Rendering 🙈 🙈 🙉 🙉 🙊 🙊\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n   ","date":"June 8, 2020","hero":"/posts/markdown-sample/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/markdown-sample/","summary":"This is a sample post intended to test the followings:\n A different post author. Table of contents. Markdown content rendering. Math rendering. Emoji rendering.   Markdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur?","tags":null,"title":"Markdown Samples"},{"categories":null,"contents":"This is a sample post intended to test the followings:\n A different post author. Table of contents. Markdown content rendering. Math rendering. Emoji rendering.   Markdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\n2022  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.Rob Pike1    The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n   ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/publications/","summary":"This is a sample post intended to test the followings:\n A different post author. Table of contents. Markdown content rendering. Math rendering. Emoji rendering.   Markdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\n2022  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.Rob Pike1    The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.","tags":["new","template"],"title":"Publications Samples"},{"categories":["Basic"],"contents":"This sample post tests the followings:\n Category, sub-category nesting in the sidebar. Hero image and other images are in images folder inside this post directory. Different media rendering like image, tweet, YouTube video, Vimeo video etc.  Image Sample  Tweet Sample YouTube Video Sample    Vimeo Video Sample   ","date":"June 8, 2020","hero":"/posts/category/sub-category/rich-content/images/forest.jpg","permalink":"https://jjiang-amoy.github.io/posts/category/sub-category/rich-content/","summary":"This sample post tests the followings:\n Category, sub-category nesting in the sidebar. Hero image and other images are in images folder inside this post directory. Different media rendering like image, tweet, YouTube video, Vimeo video etc.  Image Sample  Tweet Sample YouTube Video Sample    Vimeo Video Sample   ","tags":["Markdown","Content Organization","Multi-lingual"],"title":"Rich Content"},{"categories":null,"contents":"This is a sample post intended to test the followings:\n Default hero image. Different shortcodes.  Two column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies.\n Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat.       \u0026lt;td\u0026gt;\u0026lt;img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; alt=\u0026quot;2\u0026quot; width = 100px height = 100px\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; alt=\u0026quot;3\u0026quot; width = 100px height = 100px\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; alt=\u0026quot;4\u0026quot; width = 100px height = 100px\u0026gt;\u0026lt;/td\u0026gt;    ","date":"June 8, 2020","hero":"/posts/group-member/boat.jpg","permalink":"https://jjiang-amoy.github.io/posts/group-member/","summary":"This is a sample post intended to test the followings:\n Default hero image. Different shortcodes.  Two column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies.\n Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat.       \u0026lt;td\u0026gt;\u0026lt;img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; alt=\u0026quot;2\u0026quot; width = 100px height = 100px\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;img src=\u0026quot;/posts/shortcodes/boat.","tags":null,"title":"Shortcodes Samples"},{"categories":null,"contents":"This is a sample post intended to test the followings:\n Default hero image. Different shortcodes.  Alert The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;.  This is sample alert with type=\u0026quot;danger\u0026quot;.  This is sample alert with type=\u0026quot;warning\u0026quot;.  This is sample alert with type=\u0026quot;info\u0026quot;.  This is sample alert with type=\u0026quot;dark\u0026quot;.  This is sample alert with type=\u0026quot;primary\u0026quot;.  This is sample alert with type=\u0026quot;secondary\u0026quot;.  Image A sample image without any attribute.  A sample image with height and width attributes.  A center aligned image with height and width attributes.  A image with float attribute. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Praesent tellus risus, eleifend vel efficitur ac, venenatis sit amet sem. Ut ut egestas erat. Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Suspendisse nec ipsum eu erat finibus dictum. Morbi volutpat nulla purus, vel maximus ex molestie id. Nullam posuere est urna, at fringilla eros venenatis quis.\nFusce vulputate dolor augue, ut porta sapien fringilla nec. Vivamus commodo erat felis, a sodales lectus finibus nec. In a pulvinar orci. Maecenas suscipit eget lorem non pretium. Nulla aliquam a augue nec blandit. Curabitur ac urna iaculis, ornare ligula nec, placerat nulla. Maecenas aliquam nisi vitae tempus vulputate.\nSplit This theme support splitting the page into as many columns as you wish.\nTwo column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies.  Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat.   Three column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies.  Middle Column Aenean dignissim dictum ex. Donec a nunc vel nibh placerat interdum.  Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat.   Vertical Space Give vertical space between two lines.\nThis is line one.  This is line two. It should have 4rem vertical space with previous line.\nVideo  Video by Rahul Sharma from Pexels.\nMermaid Here, are few example of mermaid shortcode.\nGraph:\ngraph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]  Sequence Diagram:\nsequenceDiagram participant Alice participant Bob Alice-John: Hello John, how are you? loop Healthcheck John-John: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--Alice: Great! John-Bob: How about you? Bob--John: Jolly good!  Gantt diagram:\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d  Class Diagram:\nclassDiagram Class01 C2 : Where am i? Class09 --* C3 Class09 --| Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08  C2: Cool label  Git Graph:\ngitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch  ER Diagram:\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses  ","date":"June 8, 2020","hero":"/posts/shortcodes/boat.jpg","permalink":"https://jjiang-amoy.github.io/posts/shortcodes/","summary":"This is a sample post intended to test the followings:\n Default hero image. Different shortcodes.  Alert The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;.  This is sample alert with type=\u0026quot;danger\u0026quot;.  This is sample alert with type=\u0026quot;warning\u0026quot;.  This is sample alert with type=\u0026quot;info\u0026quot;.  This is sample alert with type=\u0026quot;dark\u0026quot;.  This is sample alert with type=\u0026quot;primary\u0026quot;.  This is sample alert with type=\u0026quot;secondary\u0026quot;.","tags":null,"title":"Shortcodes Samples"},{"categories":null,"contents":"After installing this theme, when you first run your site, it will start with the default parameters. It should look similar to this example site except it will not have any sections on the homepage. Those sections are added via some data files. In the next few posts, I am going to show you how you can add those sections by providing the data files.\nIn this post, I am going to show you how you can change the site parameters to change background, logo, author information, and enable/disable various features.\nAdd Background Image At first, let\u0026rsquo;s set a background on your website. Put your desired background image in the assets/images directory. Then add the following in the params section of your config.yaml file.\nbackground: \u0026#34;images/\u0026lt;your background image name(with file extension)\u0026gt;\u0026#34; Add Site\u0026rsquo;s Logo Now, let\u0026rsquo;s add a logo for your site. You have to provide two different logos. One is for the transparent navbar and another for the non-transparent navbar. Put your logos into assets/images directory and add the following in the params section of config.yaml file.\n# The inverted logo will be used in the initial transparent navbar and # the main logo will be used in the non-transparent navbar. logo: main: images/main-logo.png inverted: images/inverted-logo.png favicon: images/favicon.png Enable Blog Post If you want to write some blog posts on your site, you have to enable it first. Let\u0026rsquo;s enable blog posting by adding the following in the params section of your config.yaml file.\nenableBlogPost: true Enable Table Of Contents Now, if you want to show Table Of Contents section in your blog post, you have to enable it in the params section of config.yaml file.\nenableTOC: true You can also control the level of your TOC by adding the following configuration in the markup section of your config.yaml file.\nmarkup: tableOfContents: startLevel: 2 endLevel: 6 ordered: false Here, we have configured our TOC to show all headings from h2 to h6.\nEnable \u0026lt;Improve This Page\u0026gt; Button If you want to provide the readers an easy way to improve a post (i.e. typo fix, indentation fix, etc.), you can enable \u0026lt;Improve This Page\u0026gt; button by adding your git repository URL in the params section of your config.yaml file.\ngitRepo: \u0026lt;your site\u0026#39;s Github repo URL\u0026gt; This will add a button labeled Improve This Page at the bottom of every blog post. The button will route the user directly to the respective edit page in Github.\nEnable/Disable Newsletter The newsletter feature only supports Mailchimp for now.\nAdd the following in the params section of config.yaml file.\nnewsletter: enable: true provider: mailchimp mailchimpURL: https://github.us1.list-manage.com/subscribe/post?u=19de52a4603135aae97163fd8\u0026amp;amp;id=094a24c76e If you don\u0026rsquo;t want to use the newsletter feature, you can hide it by adding following in the params section of config.yaml file.\nnewsletter: enable: false Enable RAW HTML in the Markdown File If you want to use RAW HTML in your markdown files, you have to enable unsafe rendering. Otherwise, Hugo will not render the HTML. You can enable unsafe markdown rendering by adding following goldmark settings in the markup section of config.yaml file.\nmarkup: goldmark: renderer: unsafe: true Add Author Information Now, provide your basic information. Create a author.yaml file in your /data directory and add the author information there.\n# some information about you name: \u0026#34;Jane Doe\u0026#34; nickname: \u0026#34;Jane\u0026#34; image: \u0026#34;images/avatar.png\u0026#34; # greeting message before your name. it will default to \u0026#34;Hi! I am\u0026#34; if not provided greeting: \u0026#34;Hi, I am\u0026#34; # give your contact information. they will be used in the footer contactInfo: email: \u0026#34;janedoe@example.com\u0026#34; phone: \u0026#34;+0123456789\u0026#34; # a summary of what you do summary: - I am a Developer - I work with Go - I love to work with some fun projects Add Copyright Notice Let\u0026rsquo;s add a copyright notice for your site. This will be shown at the bottom of the footer. Create site.yaml file in your /data directory and add the following section there.\ncopyright: © 2020 Copyright. Site\u0026rsquo;s Description Now, add a description of your site that will help the search engines to find your site. Add a description section in your site.yaml file.\n# Meta description for your site. This will help the search engines to find your site. description: Example site for hugo theme Toha. Add Custom Menus If you want to add some custom menus in the navbar, you can easily add them by adding the following in the site.yaml file. Custom menus are visible in the navigation bar by default. To hide them, set hideFromNavbar to true. Custom menus are hidden from the footer\u0026rsquo;s navigation area by default. To show a custom menu item in the footer, set its showOnFooter property to true.\ncustomMenus: - name: Notes url: https://hossainemruz.gitbook.io/notes/ hideFromNavbar: false showOnFooter: true This is particularly helpful when you want to add a link to another site in the navbar.\nExample params Section Finally, here is the params section used in this example site.\n# Site parameters params: # background image of the landing page background: \u0026#34;images/background.jpg\u0026#34; # Provide logos for your site. The inverted logo will be used in the initial # transparent navbar and the main logo will be used in the non-transparent navbar. # It will default to the theme logos if not provided. logo: main: images/main-logo.png inverted: images/inverted-logo.png favicon: images/favicon.png # GitHub repo URL of your site gitRepo: https://github.com/hossainemruz/toha-example-site # specify whether you want to write some blog posts or not enableBlogPost: true # specify whether you want to show Table of Contents in reading page enableTOC: true # Provide newsletter configuration. This feature hasn\u0026#39;t been implemented yet. # Currently, you can just hide it from the footer. newsletter: enable: true ","date":"June 8, 2020","hero":"/posts/configuration/site-parameters/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/configuration/site-parameters/","summary":"After installing this theme, when you first run your site, it will start with the default parameters. It should look similar to this example site except it will not have any sections on the homepage. Those sections are added via some data files. In the next few posts, I am going to show you how you can add those sections by providing the data files.\nIn this post, I am going to show you how you can change the site parameters to change background, logo, author information, and enable/disable various features.","tags":null,"title":"Configuring Site Parameters"},{"categories":null,"contents":"The About section should give the viewer a brief idea about yourself. In this post, we are going to configure the About section of your website.\nAt first, create about.yaml file in the data/en/sections directory of your site. Then, follow the following instructions.\nAdd Section information section: name: About # Title of section (default: \u0026#34;\u0026#34;) id: about # url id/slug of section *Required* enable: true # Boolean to determine if this section is enabled (default: false) weight: 1 # Order to display section in (default: alphabetical followed by weight) showOnNavbar: true # Boolean to determine if a link should be shown for this section on the navbar template: sections/about.html # allows you to point to a specific template. Template setting It is possible to overwrite which partial this section is grabbed from using the template property. The new template should be saved in your layout/partials directory.\nAdd Your Work Information Let\u0026rsquo;s add some information about your current job. Add the following section in your about.yaml file,\n# your designation designation: Software Engineer # your company information company: name: Example Co. url: \u0026#34;https://www.example.com\u0026#34; Add a Summary About Yourself Now, let\u0026rsquo;s add a summary of what you do. The purpose of this section is to give the viewer an idea about your professional expertise at a glance. Add the following section in your about.yaml file,\n# a summary about you summary: \u0026#39;I am a passionate software engineer with x years of working experience. I built OSS tools for [Kubernetes](https://kubernetes.io/) using GO. My tools help people to deploy their workloads in Kubernetes. Sometimes, I work on some fun projects such as writing a theme, etc.\u0026#39; Try to make it as brief as possible. Don\u0026rsquo;t make it too wordy. We have other sections that give more insight into your expertise.\n You can use markdown syntax in the summary field.\n Add Your Social Links Now, we are going to add some links to your various profiles such as LinkedIn, Twitter, Github etc. Add the following socialLinks section in your about.yaml file,\n# your social links # give as many as you want. use font-awesome for the icons. socialLinks: - name: Email icon: \u0026#34;fas fa-envelope\u0026#34; url: \u0026#34;example@gmail.com\u0026#34; - name: Github icon: \u0026#34;fab fa-github\u0026#34; url: \u0026#34;https://www.github.com/example\u0026#34; - name: Stackoverflow icon: \u0026#34;fab fa-stack-overflow\u0026#34; url: \u0026#34;#\u0026#34; - name: LinkedIn icon: \u0026#34;fab fa-linkedin\u0026#34; url: \u0026#34;#\u0026#34; - name: Twitter icon: \u0026#34;fab fa-twitter\u0026#34; url: \u0026#34;#\u0026#34; - name: Facebook icon: \u0026#34;fab fa-facebook\u0026#34; url: \u0026#34;#\u0026#34; You can use any Font Awesome free icons in the icon field.\nAdd a Resume Now, let\u0026rsquo;s add your resume. Put the resume pdf file in any folder under static directory. Then, add the following section in your about.yaml file,\n# your resume. this file path should be relative to you \u0026#34;static\u0026#34; directory resume: \u0026#34;files/resume.pdf\u0026#34; Add badges Now, let\u0026rsquo;s add your badges and strength indicator on various soft skills such as leadership, communication, teamwork, etc. Add the following section in your about.yaml file,\n# Show your badges # You can show your verifiable certificates from https://www.credly.com. # You can also show a circular bar indicating the level of expertise on a certain skill badges: - type: certification name: Certified Kubernetes Security Specialist url: \u0026#34;https://www.credly.com/org/the-linux-foundation/badge/exam-developer-certified-kubernetes-security-specialist\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/f4bf92ed-8985-40b2-bc07-2f9308780854/kubernetes-security-specialist-logo-examdev.png\u0026#34; - type: certification name: Istio and IBM Cloud Kubernetes Service url: \u0026#34;https://www.credly.com/org/the-linux-foundation/badge/exam-developer-certified-kubernetes-security-specialist\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/8d34d489-84bf-4861-a4a0-9e9d68318c5c/Beyond_basics_of_Istio_on_Cloud_v2.png\u0026#34; - type: certification name: Artificial Intelligence and Machine Learning url: \u0026#34;https://www.credly.com/org/grupo-bancolombia/badge/artificial-intelligence-and-machine-learning\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/e027514f-9d07-4b29-862f-fe21a8aaebf1/ae.png\u0026#34; - type: soft-skill-indicator name: Leadership percentage: 85 color: blue - type: soft-skill-indicator name: Team Work percentage: 90 color: yellow - type: soft-skill-indicator name: Hard Working percentage: 85 color: orange Currently, the skill percentage should be between 50 and 100 and should be divisible by 5. The following colors are available for skills percentage indicator,\n blue yellow pink green   The following image shows how the contents of about.yaml are mapped into the About section. (The configuration portion of the image is outdated and softSkills section has been replaced with badges)\nExample about.yaml File Here, is the about.yaml file that has been used to create the About section of this site.\n# your designation designation: Software Engineer # your company information company: name: Example Co. url: \u0026#34;https://www.example.com\u0026#34; # your resume. this file path should be relative to you \u0026#34;static\u0026#34; directory resume: \u0026#34;files/resume.pdf\u0026#34; # a summary about you summary: \u0026#39;I am a passionate software engineer with x years of working experience. I built OSS tools for [Kubernetes](https://kubernetes.io/) using GO. My tools help people to deploy their workloads in Kubernetes. Sometimes, I work on some fun projects such as writing a theme, etc.\u0026#39; # your social links # give as many as you want. use font-awesome for the icons. socialLinks: - name: Email icon: \u0026#34;fas fa-envelope\u0026#34; url: \u0026#34;example@gmail.com\u0026#34; - name: Github icon: \u0026#34;fab fa-github\u0026#34; url: \u0026#34;https://www.github.com/example\u0026#34; - name: Stackoverflow icon: \u0026#34;fab fa-stack-overflow\u0026#34; url: \u0026#34;#\u0026#34; - name: LinkedIn icon: \u0026#34;fab fa-linkedin\u0026#34; url: \u0026#34;#\u0026#34; - name: Twitter icon: \u0026#34;fab fa-twitter\u0026#34; url: \u0026#34;#\u0026#34; - name: Facebook icon: \u0026#34;fab fa-facebook\u0026#34; url: \u0026#34;#\u0026#34; # Show your badges # You can show your verifiable certificates from https://www.credly.com. # You can also show a circular bar indicating the level of expertise on a certain skill badges: - type: certification name: Certified Kubernetes Security Specialist url: \u0026#34;https://www.credly.com/org/the-linux-foundation/badge/exam-developer-certified-kubernetes-security-specialist\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/f4bf92ed-8985-40b2-bc07-2f9308780854/kubernetes-security-specialist-logo-examdev.png\u0026#34; - type: certification name: Istio and IBM Cloud Kubernetes Service url: \u0026#34;https://www.credly.com/org/the-linux-foundation/badge/exam-developer-certified-kubernetes-security-specialist\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/8d34d489-84bf-4861-a4a0-9e9d68318c5c/Beyond_basics_of_Istio_on_Cloud_v2.png\u0026#34; - type: certification name: Artificial Intelligence and Machine Learning url: \u0026#34;https://www.credly.com/org/grupo-bancolombia/badge/artificial-intelligence-and-machine-learning\u0026#34; badge: \u0026#34;https://images.credly.com/size/680x680/images/e027514f-9d07-4b29-862f-fe21a8aaebf1/ae.png\u0026#34; - type: soft-skill-indicator name: Leadership percentage: 85 color: blue - type: soft-skill-indicator name: Team Work percentage: 90 color: yellow - type: soft-skill-indicator name: Hard Working percentage: 85 color: orange ","date":"June 8, 2020","hero":"/posts/configuration/sections/about/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/configuration/sections/about/","summary":"The About section should give the viewer a brief idea about yourself. In this post, we are going to configure the About section of your website.\nAt first, create about.yaml file in the data/en/sections directory of your site. Then, follow the following instructions.\nAdd Section information section: name: About # Title of section (default: \u0026#34;\u0026#34;) id: about # url id/slug of section *Required* enable: true # Boolean to determine if this section is enabled (default: false) weight: 1 # Order to display section in (default: alphabetical followed by weight) showOnNavbar: true # Boolean to determine if a link should be shown for this section on the navbar template: sections/about.","tags":null,"title":"Configuring About Section"},{"categories":null,"contents":"Warning: New breaking changes has been introduced in the master. This guide is now outdated. It will be updated soon. Now, your site configuration files should be in data/en/sections directory and should follow this format.  The Skills section should give the viewer an idea about not only the list of skills you have but also an idea of the depth of your knowledge on a particular skill. In this post, we are going to configure the Skills section of your site.\nAt first, create skills.yaml files in the data directory of your site. Then, follow the following instruction.\nAdd Your Skills Now, let\u0026rsquo;s add a skills section in your skills.yaml file as bellow,\nskills: - name: Kubernetes icon: \u0026#34;images/skills/kubernetes.png\u0026#34; summary: \u0026#34;Capable of deploying, managing application on Kubernetes. Experienced in writing Kubernetes controllers for CRDs.\u0026#34; Here, you have to provide name, icon, and summary fields for a skill. The summary field should provide an idea about your depth of knowledge of this particular skill.\n You can use markdown syntax in the summary field.\n  The following image shows how the content of skills.yaml files are mapped into the Skills section.\nExample skills.yaml File Here, is the skills.yaml file that has been used to create the Skills section of this site.\n# Your Skills. # Give a summary of you each skill in the summary section. skills: - name: Kubernetes icon: \u0026#34;images/skills/kubernetes.png\u0026#34; summary: \u0026#34;Capable of deploying, managing application on Kubernetes. Experienced in writing Kubernetes controllers for CRDs.\u0026#34; - name: Go Development icon: \u0026#34;images/skills/go.png\u0026#34; summary: \u0026#34;Using as the main language for professional development. Capable of writing scalable, testable, and maintainable program.\u0026#34; - name: Cloud Computing icon: \u0026#34;images/skills/cloud.png\u0026#34; summary: \u0026#34;Worked with most of the major clouds such as GCP, AWS, Azure etc.\u0026#34; - name: Docker icon: \u0026#34;images/skills/docker.svg\u0026#34; summary: \u0026#34;Write most of the programs as dockerized container. Experienced with multi-stage, multi-arch build process.\u0026#34; - name: Prometheus icon: \u0026#34;images/skills/prometheus.png\u0026#34; summary: \u0026#34;Capable of setup, configure Prometheus metrics. Experienced with PromQL, AlertManager. Also, experienced with writing metric exporters.\u0026#34; - name: Linux icon: \u0026#34;images/skills/linux.png\u0026#34; summary: \u0026#34;Using as the main operating system. Capable of writing bash/shell scripts.\u0026#34; - name: Git icon: \u0026#34;images/skills/git.png\u0026#34; summary: \u0026#34;Experienced with git-based development. Mostly, use Github. Also, have experience in working with GitLab.\u0026#34; - name: C++ icon: \u0026#34;images/skills/c++.png\u0026#34; summary: \u0026#34;Know basic C/C++ programming. Used for contest programming and problem solving.\u0026#34; ","date":"June 8, 2020","hero":"/posts/configuration/sections/skills/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/configuration/sections/skills/","summary":"Warning: New breaking changes has been introduced in the master. This guide is now outdated. It will be updated soon. Now, your site configuration files should be in data/en/sections directory and should follow this format.  The Skills section should give the viewer an idea about not only the list of skills you have but also an idea of the depth of your knowledge on a particular skill. In this post, we are going to configure the Skills section of your site.","tags":null,"title":"Configuring Skills Section"},{"categories":null,"contents":"Post coming soon\u0026hellip;\u0026hellip;\u0026hellip; ","date":"June 8, 2020","hero":"/posts/configuration/sections/education/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/configuration/sections/education/","summary":"Post coming soon\u0026hellip;\u0026hellip;\u0026hellip; ","tags":null,"title":"Configuring Education Section"},{"categories":null,"contents":"Warning: New breaking changes has been introduced in the master. This guide is now outdated. It will be updated soon. Now, your site configuration files should be in data/en/sections directory and should follow this format.  The Experiences section has been designed to truly reflect your career background. It should give the viewer an idea about the responsibilities you have handled in various stages of your career. In this post, we are going to configure the Experiences section of your site.\nAt first, create an experiences.yaml file in the data directory of your site. Then, follow the following instruction.\nAdd Your Experiences Now, let\u0026rsquo;s add an experiences section in the experiences.yaml file as below,\n# Your experiences experiences: - designation: Software Engineer company: name: Example Co. url: \u0026#34;https://www.example.com\u0026#34; location: Dhaka Branch # company overview overview: Example Co. is a widely recognized company for cloud-native development. It builds tools for Kubernetes. start: Nov 2017 # don\u0026#39;t provide end date if you are currently working there. It will be replaced by \u0026#34;Present\u0026#34; end: Dec 2020 # give some points about what was your responsibilities at the company. responsibilities: - Design, develop and manage disaster a recovery tool [Xtool](https://www.example.com) that backup Kubernetes volumes, databases, and cluster\u0026#39;s resource definition. - My another responsibility. - My more responsibilities. Each entry in the experiences section should have the following information,\n designation: Represents your position at the company. company: Some information about your company. You should provide name, url, location, and a brief overview of the company. start: Time when you had joined the company. end: Time when you have left the company. If you are currently working in the company, don\u0026rsquo;t provide this field. responsibilities: A list of responsibilities you handled in the company. This section is very important as it will give the viewer an idea about the professional responsibilities you are capable to deal with.   You can use markdown syntax in overview field of company section and responsibilities field.\n  The following image shows how the contents of experiences.yaml are mapped into the Experiences section.\nExample experiences.yaml File Here, is the experiences.yaml file that has been used to create the Experiences section of this site.\n# Your experiences experiences: - designation: Software Engineer company: name: Example Co. url: \u0026#34;https://www.example.com\u0026#34; location: Dhaka Branch # company overview overview: Example Co. is a widely recognized company for cloud-native development. It builds tools for Kubernetes. start: Nov 2017 # don\u0026#39;t provide end date if you are currently working there. It will be replaced by \u0026#34;Present\u0026#34; # end: Dec 2020 # give some points about what was your responsibilities at the company. responsibilities: - Design, develop and manage disaster recovery tool [Xtool](https://www.example.com) that backup Kubernetes volumes, databases, and cluster\u0026#39;s resource definition. - My another responsibility. - My more responsibilities. - designation: Software Engineer company: name: PreExample Co. url: \u0026#34;https://www.preexample.com\u0026#34; location: Nowhere overview: PreExample Co. is a gateway company to enter into Example co. So, nothing special here. start: March 2016 end: May 2017 responsibilities: - Write lots of example codes. - Read lots of examples. - See lots of example videos. - designation: Intern company: name: Intern Counting Company (ICC). url: \u0026#34;https://www.intern.com\u0026#34; location: Intern Land overview: Intern counting Company (ICC) is responsible for counting worldwide intern Engineers. start: Jun 2015 end: Jan 2016 responsibilities: - Count lost of interns. - Count more interns. - Count me as an intern. ","date":"June 8, 2020","hero":"/posts/configuration/sections/experiences/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/configuration/sections/experiences/","summary":"Warning: New breaking changes has been introduced in the master. This guide is now outdated. It will be updated soon. Now, your site configuration files should be in data/en/sections directory and should follow this format.  The Experiences section has been designed to truly reflect your career background. It should give the viewer an idea about the responsibilities you have handled in various stages of your career. In this post, we are going to configure the Experiences section of your site.","tags":null,"title":"Configuring Experiences Section"},{"categories":null,"contents":"Warning: New breaking changes has been introduced in the master. This guide is now outdated. It will be updated soon. Now, your site configuration files should be in data/en/sections directory and should follow this format.  The Projects section has been designed to showcase your projects in a meaningful way. In this post, we are going to configure the Projects section of your site.\nAt first, create a projects.yaml file in the data directory of your site. Then, follow the following instructions.\nAdd Project Filtering Buttons Now, add a buttons section in your projects.yaml file as bellow,\nbuttons: - name: All filter: \u0026#34;all\u0026#34; - name: Professional filter: \u0026#34;professional\u0026#34; - name: Academic filter: \u0026#34;academic\u0026#34; - name: Hobby filter: \u0026#34;hobby\u0026#34; Each button has two properties. The first property is name which is the text that will be displayed on the button and the other is filter which specifies the category of the projects this button should select.\nA button will show only those projects that have a tag that matches the text specified in the filter filed. The filter value all is treated specially. It matches all the projects even though they don\u0026rsquo;t have all as a tag in their tags field.\nAdd Your Projects Now, add your projects under the projects section of your projects.yaml file as bellow,\nprojects: - name: Kubernetes logo: images/projects/kubernetes.png role: Contributor timeline: \u0026#34;March 2018 - Present\u0026#34; repo: https://github.com/kubernetes/kubernetes # url: \u0026#34;\u0026#34; summary: Production-Grade Container Scheduling and Management . tags: [\u0026#34;professional\u0026#34;, \u0026#34;kubernetes\u0026#34;, \u0026#34;cloud\u0026#34;] You can specify the following field for a project,\n name: The name of the project. logo: The logo of the project. If the project does not have a logo, the theme will automatically add a placeholder there. role: Your role in the project. timeline: The timeline when you have worked on the project. repo: If the project is an open-source project and hosted on Github, you can provide the repository URL. This will be used to show the star count for the project. url: If the project is not an open-source project or not hosted on Github, you can provide an URL of the project. This will create a button with the link in the project card. summary: A short description of your project. tags: A list of tags for your project. It will be used to select the project under a category by the filtering buttons.   You can use markdown syntax in the summary field.\n  The following image shows how the contents of projects.yaml are mapped into the Projects section.\nExample projects.yaml File Here, is the projects.yaml file that has been used to create the Projects section of this site.\n# filter buttons buttons: - name: All filter: \u0026#34;all\u0026#34; - name: Professional filter: \u0026#34;professional\u0026#34; - name: Academic filter: \u0026#34;academic\u0026#34; - name: Hobby filter: \u0026#34;hobby\u0026#34; # your projects projects: - name: Kubernetes logo: images/projects/kubernetes.png role: Contributor timeline: \u0026#34;March 2018 - Present\u0026#34; repo: https://github.com/kubernetes/kubernetes # If your project is a public repo on GitHub, then provide this link. it will show star count. #url: \u0026#34;\u0026#34; # If your project is not a public repo but it has a website or any external details url then provide it here. don\u0026#39;t provide \u0026#34;repo\u0026#34; and \u0026#34;url\u0026#34; simultaneously. summary: Production-Grade Container Scheduling and Management. tags: [\u0026#34;professional\u0026#34;, \u0026#34;kubernetes\u0026#34;, \u0026#34;cloud\u0026#34;] - name: Tensorflow logo: images/projects/tensorflow.png role: Developer timeline: \u0026#34;Jun 2018 - Present\u0026#34; repo: https://github.com/tensorflow/tensorflow #url: \u0026#34;\u0026#34; summary: An Open Source Machine Learning Framework for Everyone. tags: [\u0026#34;professional\u0026#34;, \u0026#34;machine-learning\u0026#34;,\u0026#34;academic\u0026#34;] - name: A sample academic paper role: Team Lead timeline: \u0026#34;Jan 2017 - Nov 2017\u0026#34; url: \u0026#34;https://www.example.com\u0026#34; summary: Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente eius reprehenderit animi suscipit autem eligendi esse amet aliquid error eum. Accusantium distinctio soluta aliquid quas placeat modi suscipit eligendi nisi. tags: [\u0026#34;academic\u0026#34;,\u0026#34;iot\u0026#34;] - name: Nocode logo: images/projects/no-code.png role: Nothing timeline: \u0026#34;Oct 2019 - Dec 2019\u0026#34; repo: https://github.com/kelseyhightower/nocode #url: \u0026#34;\u0026#34; summary: The best way to write secure and reliable applications. Write nothing; deploy nowhere. tags: [\u0026#34;hobby\u0026#34;, \u0026#34;fun\u0026#34;] - name: Toha logo: images/projects/toha.png role: Owner timeline: \u0026#34;Jun 2019 - Present\u0026#34; repo: https://github.com/hossainemruz/toha summary: A Hugo theme for personal portfolio. tags: [\u0026#34;hobby\u0026#34;,\u0026#34;hugo\u0026#34;,\u0026#34;theme\u0026#34;,\u0026#34;professional\u0026#34;] ","date":"June 8, 2020","hero":"/posts/configuration/sections/projects/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/configuration/sections/projects/","summary":"Warning: New breaking changes has been introduced in the master. This guide is now outdated. It will be updated soon. Now, your site configuration files should be in data/en/sections directory and should follow this format.  The Projects section has been designed to showcase your projects in a meaningful way. In this post, we are going to configure the Projects section of your site.\nAt first, create a projects.yaml file in the data directory of your site.","tags":null,"title":"Configuring Projects Section"},{"categories":null,"contents":"The Recent Posts section will display the most recent posts from your content. The configuration is simple, and should be stored in data/en/sections.\nConfiguration After you have created the file recent-posts.yaml, the configuration is very simple,\n# section information section: name: Recent Posts # Title of section (default: \u0026#34;\u0026#34;) id: recent-posts # url id/slug of section *Required* enable: true # Boolean to determine if this section is enabled (default: false) weight: 6 # Order to display section in (default: alphabetical followed by weight) showOnNavbar: true # Boolean to determine if a link should be shown for this section on the navbar hideTitle: true # Can optionally hide the title in sections (default: false) numShow: 4 # Can optionally increase the number of posts to display (default: 3) ","date":"June 8, 2020","hero":"/posts/configuration/sections/recent-posts/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/configuration/sections/recent-posts/","summary":"The Recent Posts section will display the most recent posts from your content. The configuration is simple, and should be stored in data/en/sections.\nConfiguration After you have created the file recent-posts.yaml, the configuration is very simple,\n# section information section: name: Recent Posts # Title of section (default: \u0026#34;\u0026#34;) id: recent-posts # url id/slug of section *Required* enable: true # Boolean to determine if this section is enabled (default: false) weight: 6 # Order to display section in (default: alphabetical followed by weight) showOnNavbar: true # Boolean to determine if a link should be shown for this section on the navbar hideTitle: true # Can optionally hide the title in sections (default: false) numShow: 4 # Can optionally increase the number of posts to display (default: 3) ","tags":null,"title":"Configuring Recent Posts Section"},{"categories":null,"contents":"Warning: New breaking changes has been introduced in the master. This guide is now outdated. It will be updated soon. Now, your site configuration files should be in data/en/sections directory and should follow this format.  The Achievements section has been designed to showcase your achievements in a gallery view. This post will show how to configure the Achievements section of your site.\nAt first, create an achievements.yaml file in the data directory of your site. Then, follow the following instruction.\nAdd Your Achievements Now, add your achievements under the achievements section in your achievements.yaml file as below,\nachievements: - title: Best Presenter image: images/sections/achievements/presenter.jpg summary: Best presenter in the 2020 XYZ conference. Each achievements entry should have the following fields,\n title: The title of the achievement. image: An image of the achievement. summary: A summary of the achievement.   You can use markdown syntax in the summary field.\n  The following image shows how the contents of achievements.yaml are mapped into the Achievements section.\nExample achievements.yaml File Here, is the achievements.yaml file that has been used to create the Achievements section of this site.\n# Your achievements achievements achievements: - title: Best Presenter image: images/achievements/presenter.jpg summary: Best presenter in the 2020 XYZ conference. - title: Champion image: images/achievements/sport.jpg summary: Champion in cycling inter-city cycling championship 2020. - title: Graduation image: images/achievements/graduation-cap.jpg summary: Received Bachelor of Science (B.Sc.) in Computer Science and Engineer from XYZ University. - title: Award Winner image: images/achievements/woman-winner.jpg summary: Lorem ipsum dolor sit amet consectetur adipisicing elit. Possimus architecto minus facere vero? ","date":"June 8, 2020","hero":"/posts/configuration/sections/achievements/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/configuration/sections/achievements/","summary":"Warning: New breaking changes has been introduced in the master. This guide is now outdated. It will be updated soon. Now, your site configuration files should be in data/en/sections directory and should follow this format.  The Achievements section has been designed to showcase your achievements in a gallery view. This post will show how to configure the Achievements section of your site.\nAt first, create an achievements.yaml file in the data directory of your site.","tags":null,"title":"Configuring Achievements Section"},{"categories":null,"contents":"First, we need to understand how to create a post then we will be able to create categories.\nPost Creation To create a post in your blog first you need to go to the folder named posts. Here, create a file _index.md(The file name has to be exactly the same as it is mentioned). Then open the file and add below lines: \n--- title: Posts ---  now, save and close the file. Now, Suppose, you want to write a post. First, create a file, name it with a markdown extension at the end. For example: we\u0026rsquo;ve created a file named analytics-and-comments.md and added the below lines of contents: \n--- title: \u0026quot;Analytics and Comments\u0026quot; date: 2020-06-08T06:00:23+06:00 hero: /images/posts/writing-posts/analytics.svg description: Adding analytics and disquss comment in hugo theme: Toha menu: sidebar: name: Analytics \u0026amp; Comments identifier: analytics-and-comments weight: 500 --- ### Complete Post Coming Soon...  As we know that, the header part of this file which starts and ends with 3 horizontal hyphen(---) is called the front-matter and every blog post that we write needs to be a front matter included there. Let\u0026rsquo;s understand what are the parameters actually mean: \ntitle: This is the title of your post.  date: This is the time that shows the posting time of your blog. The first portion is in the year-month-date format. You can edit the date and time as you wish. hero: Here, you need to include the location path of the cover photo of your post. Go to the static folder and create a folder named images(If you don\u0026rsquo;t have) then inside this folder create another folder called posts and inside this, we created a folder named writing-posts where we put the image file analytics.svg. Now copy the path and add it to the hero parameter as mentioned above.  description: Add any description you like. menu: This section contains another parameter called sidebar which actually displays how the file structure in the sidebar is going to look, and under this we have: name: This defines what would be the name of the document in sidebar file hierarchy  identifier: This helps to distinguish the file from other files and helps in terms of category creation.  weight: A value is assigned to this param as a weight value and for multiple files, the documents will appear in the file hierarchy based on this weight value in ascending order.\u0026lt;/  after the front-matter, you can write any content following the markdown rules. The following image shows how the contents of analytics-and-comments.md are mapped into the sidebar section. \n In the above figure- Features, Installation, Configuration, Writing Posts, Customizing, Short Codes, etc are folders created just for other posts.\n Category Creation As we have created one _index.md file and one blog post markdown file previously, now to create a category, we need to create a folder. We created a folder called getting-started and inside this folder, we again need to create a _index.md file which contains the front-matter as below:\n--- title: Deploy Site menu: sidebar: name: Deploy Site identifier: getting-started weight: 300 --- The meaning of each parameter in the above code block has been discussed earlier. Just, for the time being, keep in mind that we are going to create the category name as getting-started that\u0026rsquo;s why we included it as an identifier in this _index.md file but you can give any name you want. Next, we are going to create a markdown file called github-pages.md which will be our blog post file for this folder. Our github-pages.md includes the following lines:\n--- title: \u0026quot;Deploy site in Github Pages\u0026quot; date: 2020-06-08T06:00:20+06:00 hero: /images/posts/writing-posts/git.svg menu: sidebar: name: Github Pages identifier: getting-started-github parent: getting-started weight: 10 --- ### Complete Post Coming Soon... We already know about the parameters used here, but we have one new parameter this time included which is parent and If we notice we will understand that the value of this param and the value of identifier param in the _index.md file inside this folder are both the same. We have to be careful that both of these parameter value matches. Now, you can add as many posts and categories as you want following the above-mentioned procedure. This is how we create categories. \nThe following image shows how the contents are mapped into the sidebar section.  Customizing post\u0026rsquo;s author information By default, the post should use author information from config.yaml. If you want to overwrite the default author information, just add following author section in the front-matter:\nauthor: name: Md.Habibur Rahman image: /images/authors/john.png Your final front-matter should look-like:\ntitle: \u0026#34;Creating Category\u0026#34; date: 2020-06-08T06:15:55+06:00 # hero: images/background/flower.jpg author: name: Md.Habibur Rahman image: /images/authors/john.png menu: sidebar: name: Creating Category identifier: writing-post-category-create parent: writing-post-category weight: 10 ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/writing-posts/organizing/category/","summary":"First, we need to understand how to create a post then we will be able to create categories.\nPost Creation To create a post in your blog first you need to go to the folder named posts. Here, create a file _index.md(The file name has to be exactly the same as it is mentioned). Then open the file and add below lines: \n--- title: Posts ---  now, save and close the file.","tags":null,"title":"Creating Category"},{"categories":null,"contents":"Complete Post Coming Soon\u0026hellip; ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/writing-posts/organizing/sub-category/example/","summary":"Complete Post Coming Soon\u0026hellip; ","tags":null,"title":"Creating Sub Category"},{"categories":null,"contents":"Complete Post Coming Soon\u0026hellip; ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/writing-posts/front-matter/","summary":"Complete Post Coming Soon\u0026hellip; ","tags":null,"title":"Front Matter"},{"categories":null,"contents":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/writing-posts/markdown-syntax/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","tags":null,"title":"Markdown Syntax Guide"},{"categories":null,"contents":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions Examples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"June 8, 2020","hero":"/posts/writing-posts/math/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/writing-posts/math/","summary":"\u003cp\u003eMathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\u003c/p\u003e","tags":null,"title":"Math Type Settings"},{"categories":null,"contents":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n Instagram Simple Shortcode  YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","date":"June 8, 2020","hero":"/posts/writing-posts/rich-content/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/writing-posts/rich-content/","summary":"\u003cp\u003eHugo ships with several \u003ca href=\"https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes\"\u003eBuilt-in Shortcodes\u003c/a\u003e for rich content, along with a \u003ca href=\"https://gohugo.io/about/hugo-and-gdpr/\"\u003ePrivacy Config\u003c/a\u003e and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\u003c/p\u003e","tags":null,"title":"Rich Content"},{"categories":null,"contents":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }","date":"June 8, 2020","hero":"/posts/writing-posts/using-emoji/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/writing-posts/using-emoji/","summary":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways.\u003c/p\u003e","tags":null,"title":"Using Emoji"},{"categories":null,"contents":"Analytics This theme has built in support for various analytic tools. Currently, it supports the following analytics:\n GoatCounter counter.dev Google Analytics  Warning: When adding analytics, you should consider local legislation to see if a privacy banner is required to inform users of the tracking in personal data. In general (not legal advice), privacy-friendly, anonymous methods such as counter.dev and GoatCounter don\u0026rsquo;t need a banner, since they do not collect personally identifiable data.  Goat Counter GoatCounter is the most complete, simple and privacy friendly analytics method supported in Toha. Its script tracks the most viewed pages, total number of users, devices, and much more, all while being open source!\nTo enable GoatCounter analytics in your site, you have to sign in at goatcounter.com and obtain a code for your site. Then, you have to add analytics section under params.features section of your config.yaml file as below:\nparams: features: analytics: enabled: true goatCounter: code: \u0026lt;your goat counter code\u0026gt; counter.dev counter.dev is a simple, privacy friendly and open source analytics website which enables you to track the total user count, first visited page and some other metrics on your website. Unfortunately, to keep things simple (and free) they don\u0026rsquo;t show a ranking of the most visited pages, but rather the ones that are accessed the first.\nYou can enable it by adding the email you registered with at counter.dev\u0026rsquo;s page in your config.yaml as below:\nparams: features: analytics: enabled: true counterDev: id: \u0026lt;your counter.dev id\u0026gt; The tracking code will be automatically added to your site.\nNote: On some sites, an error has been detected where only the root directory (\u0026quot;/\u0026quot;) is passed over to counter.dev, so the tracking wont show anything under the \u0026ldquo;pages\u0026rdquo; section. To fix this, one can add referrerPolicy: no-referrer-when-downgrade as a parameter on the \u0026ldquo;counterDev\u0026rdquo; section, ensuring that new page visits are always correctly passed onto counter.dev.\nGoogle Analytics Beware that according to recent case law, Google Analytics might be illegal in the European Union  You can enable Google Analytics in your site by adding your tracking id in your config.yaml file as below:\nparams: features: analytics: enabled: true google: id: UA-122321624-2 You can use both V3 or V4 tracking ID. The theme will automatically detect the tracking code version and add the respective tracking scripts accordingly to your site.\nFor additional privacy settings regarding Google Analytics, you can provide privacy.googleAnalytics section in your config.yaml file as described here.\n","date":"June 8, 2020","hero":"/posts/analytics/hero.svg","permalink":"https://jjiang-amoy.github.io/posts/analytics/","summary":"Analytics This theme has built in support for various analytic tools. Currently, it supports the following analytics:\n GoatCounter counter.dev Google Analytics  Warning: When adding analytics, you should consider local legislation to see if a privacy banner is required to inform users of the tracking in personal data. In general (not legal advice), privacy-friendly, anonymous methods such as counter.dev and GoatCounter don\u0026rsquo;t need a banner, since they do not collect personally identifiable data.","tags":null,"title":"Analytics"},{"categories":null,"contents":"Coming soon\u0026hellip;\u0026hellip;. ","date":"June 7, 2020","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/customizing/new-section/","summary":"Coming soon\u0026hellip;\u0026hellip;. ","tags":null,"title":"How to add a new section"},{"categories":null,"contents":"Coming soon\u0026hellip;\u0026hellip;. ","date":"June 7, 2020","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/translation/content/","summary":"Coming soon\u0026hellip;\u0026hellip;. ","tags":null,"title":"How to Translate Posts"},{"categories":null,"contents":"Coming soon\u0026hellip;\u0026hellip;. ","date":"June 7, 2020","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/posts/translation/site-data/","summary":"Coming soon\u0026hellip;\u0026hellip;. ","tags":null,"title":"How to Translate Site Data"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://jjiang-amoy.github.io/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"}]